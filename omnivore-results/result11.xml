<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="9" time="58.189" timestamp="2022-07-21T11:06:19.139456" hostname="linux"><testcase classname="full_paid_with_optional_tip_ch" name="test_qr" time="12.972" /><testcase classname="full_paid_with_optional_tip_ch" name="test_fetch_order" time="10.048" /><testcase classname="full_paid_with_optional_tip_ch" name="test_split" time="4.184" /><testcase classname="full_paid_with_optional_tip_ch" name="test_edit_name" time="4.191" /><testcase classname="full_paid_with_optional_tip_ch" name="test_set_amount" time="5.114" /><testcase classname="full_paid_with_optional_tip_ch" name="test_optional_tip" time="0.054"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;css selector&quot;,&quot;selector&quot;:&quot;.Tips_tipInput__tWifa&quot;}&#10;  (Session info: chrome=103.0.5060.53)&#10;Stacktrace:&#10;#0 0x56493d740b13 &lt;unknown&gt;&#10;#1 0x56493d547688 &lt;unknown&gt;&#10;#2 0x56493d57ecc7 &lt;unknown&gt;&#10;#3 0x56493d57ee91 &lt;unknown&gt;&#10;#4 0x56493d5b1e34 &lt;unknown&gt;&#10;#5 0x56493d59c8dd &lt;unknown&gt;&#10;#6 0x56493d5afb94 &lt;unknown&gt;&#10;#7 0x56493d59c7a3 &lt;unknown&gt;&#10;#8 0x56493d5720ea &lt;unknown&gt;&#10;#9 0x56493d573225 &lt;unknown&gt;&#10;#10 0x56493d7882dd &lt;unknown&gt;&#10;#11 0x56493d78c2c7 &lt;unknown&gt;&#10;#12 0x56493d77222e &lt;unknown&gt;&#10;#13 0x56493d78d0a8 &lt;unknown&gt;&#10;#14 0x56493d766bc0 &lt;unknown&gt;&#10;#15 0x56493d7a96c8 &lt;unknown&gt;&#10;#16 0x56493d7a9848 &lt;unknown&gt;&#10;#17 0x56493d7c3c0d &lt;unknown&gt;&#10;#18 0x7f766a4e3b43 &lt;unknown&gt;">def test_optional_tip():
        driver.find_element(By.XPATH, '//*[@id="__next"]/div[1]/div/div[3]/div/div/div/div[2]/div/div/div[4]/button').click()
&gt;       driver.find_element(By.CLASS_NAME, 'Tips_tipInput__tWifa').send_keys('20')

full_paid_with_optional_tip_ch.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:857: in find_element
    return self.execute(Command.FIND_ELEMENT, {
../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:435: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa9ba4f8670&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...\\n#16 0x56493d7a9848 \\u003Cunknown&gt;\\n#17 0x56493d7c3c0d \\u003Cunknown&gt;\\n#18 0x7f766a4e3b43 \\u003Cunknown&gt;\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = f"{file}:{line}"
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "{}.{}".format(frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"css selector","selector":".Tips_tipInput__tWifa"}
E         (Session info: chrome=103.0.5060.53)
E       Stacktrace:
E       #0 0x56493d740b13 &lt;unknown&gt;
E       #1 0x56493d547688 &lt;unknown&gt;
E       #2 0x56493d57ecc7 &lt;unknown&gt;
E       #3 0x56493d57ee91 &lt;unknown&gt;
E       #4 0x56493d5b1e34 &lt;unknown&gt;
E       #5 0x56493d59c8dd &lt;unknown&gt;
E       #6 0x56493d5afb94 &lt;unknown&gt;
E       #7 0x56493d59c7a3 &lt;unknown&gt;
E       #8 0x56493d5720ea &lt;unknown&gt;
E       #9 0x56493d573225 &lt;unknown&gt;
E       #10 0x56493d7882dd &lt;unknown&gt;
E       #11 0x56493d78c2c7 &lt;unknown&gt;
E       #12 0x56493d77222e &lt;unknown&gt;
E       #13 0x56493d78d0a8 &lt;unknown&gt;
E       #14 0x56493d766bc0 &lt;unknown&gt;
E       #15 0x56493d7a96c8 &lt;unknown&gt;
E       #16 0x56493d7a9848 &lt;unknown&gt;
E       #17 0x56493d7c3c0d &lt;unknown&gt;
E       #18 0x7f766a4e3b43 &lt;unknown&gt;

../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: NoSuchElementException</failure></testcase><testcase classname="full_paid_with_optional_tip_ch" name="test_checkout" time="6.226" /><testcase classname="full_paid_with_optional_tip_ch" name="test_pay" time="15.150" /><testcase classname="full_paid_with_optional_tip_ch" name="test_finish" time="0.073" /></testsuite></testsuites>